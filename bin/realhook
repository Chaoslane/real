#!/usr/bin/env node

const Log = require('log');
const log = new Log('info');
const cluster = require('cluster');
const program = require('commander');

const rhconf = require('../conf/realhook.json');
const utils = require('../lib/utils');

// 读取命令行参数
program
    .version('2.0.1')
    .option('-n, --numcores <n>', '指定启动程序的vcore数量，默认4', 4)
    .option('-r, --real',  '实时数据分析模式，实时统计分析日志')
    .option('-t, --trans', '转发模式，TCP形式转发日志到flume')
    .parse(process.argv);

// 无参数直接退出
if (!process.argv.slice(2).length) {
    program.outputHelp();
    process.exit(-1)
}


if (cluster.isMaster){
    // 设置延迟启动，在子进程启动之后，同步配置文件到shotpot
    setTimeout(()=>{utils.sync2shotpot(rhconf)},3000);

    // 载入socket.io模块
    if (program.real) {
        require('../app-ws');
    }else if (program.trans){
        log.info(`Start send tcp module, trans logs to flume.`)
    }

    // fork子进程
    for (let i = 0, n = program.numcores; i < n; i += 1){
        cluster.fork();
    }

    // 监听worker状态，自动重启
    cluster.on('online', function(worker) {
        log.info('Worker(pid) ' + worker.process.pid + ' is online');
    });
    cluster.on('exit', function(worker, code, signal) {
        log.warning('Worker ' + worker.process.pid + ' died with code: ' + code + ', and signal: ' + signal);
        log.warning('ReStarting a new worker');
        cluster.fork();
    });
}else {
    require('../app-worker');
}
